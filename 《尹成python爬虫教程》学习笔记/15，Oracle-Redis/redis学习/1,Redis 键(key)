https://www.runoob.com/redis/redis-keys.html
Redis 键命令用于管理 redis 的键。
Redis 键命令的基本语法如下：
redis 127.0.0.1:6379> COMMAND KEY_NAME
例如：
redis 127.0.0.1:6379> DEL runoobkey
(integer) 1
在以上实例中 DEL 是一个命令， runoobkey 是一个键。
如果键被删除成功，命令执行后输出 (integer) 1，否则将输出 (integer) 0

1	DEL key
该命令用于在 key 存在时删除 key。
redis 127.0.0.1:6379> DEL runoobkey
(integer) 1

2	DUMP key
序列化给定 key ，并返回被序列化的值。
'''
序列化的作用，序列化一般用于程序中数据的传递，
如果程序B（程序B不能访问Redis）需要程序A放在redis中数据，
这样的话使用序列化后，一些复杂的类型，比如hash，list，
可以传递序列化后的数据，B反序列化解析出数据就行了！
'''
如果 key 不存在，那么返回 nil 。 否则，返回序列化之后的值。
redis> SET greeting "hello, dumping world!"
OK
现在使用 DUMP 序列化键值：
redis> DUMP greeting
"\x00\x15hello, dumping world!\x06\x00E\xa0Z\x82\xd8r\xc1\xde"
redis> DUMP not-exists-key
(nil)

3	EXISTS key
检查给定 key 是否存在。
若 key 存在返回 1 ，否则返回 0 。
redis 127.0.0.1:6379> EXISTS runoob-new-key
(integer) 0

4.1	EXPIRE key seconds
为给定 key 设置过期时间，以秒计。
设置成功返回 1 。 当 key 不存在或者不能为 key 设置过期时间时返回 0 。
(比如在低于 2.1.3 版本的 Redis 中你尝试更新 key 的过期时间)
redis 127.0.0.1:6379> EXPIRE runooobkey 60
(integer) 1

4.2 PEXPIRE key milliseconds
设置 key 的过期时间以毫秒计。
redis> PEXPIRE mykey 1500
(integer) 1

5.1	EXPIREAT key timestamp
EXPIREAT 的作用和 EXPIRE 类似，都用于为 key 设置过期时间。
不同在于 EXPIREAT 命令接受的时间参数是 UNIX 时间戳(unix timestamp)。
实例为 key 设置过期时间：
redis 127.0.0.1:6379> EXPIREAT runoobkey 1293840000
(integer) 1


5.2 PEXPIREAT key milliseconds-timestamp
设置 key 过期时间的时间戳(unix timestamp) 以毫秒计
redis 127.0.0.1:6379> PEXPIREAT runoobkey 1555555555005
(integer) 1

6.1 TTL key
以秒为单位，返回给定 key 的剩余生存时间(TTL, time to live)。
redis> TTL mykey
(integer) 1

6.2 PTTL key
以毫秒为单位返回 key 的剩余的过期时间。
redis> PTTL mykey
(integer) 1498

6.3 PERSIST key
移除 key 的过期时间，key 将持久保持。
当过期时间移除成功时，返回 1 。 如果 key 不存在或 key 没有设置过期时间，返回 0 。
redis> PERSIST mykey    # 移除 key 的生存时间
(integer) 1

7 KEYS pattern
查找所有符合给定模式( pattern正则)的 key 。
获取 redis 中所有的 key
redis 127.0.0.1:6379> KEYS *

8 MOVE key db
将当前数据库的 key 移动到给定的数据库 db 当中。
###########################################################################
# key 存在于当前数据库
redis> SELECT 0                             # redis默认使用数据库 0，为了清晰起见，这里再显式指定一次。
OK
redis> SET song "secret base - Zone"
OK
redis> MOVE song 1                          # 将 song 移动到数据库 1
(integer) 1
redis> EXISTS song                          # song 已经被移走
(integer) 0
redis> SELECT 1                             # 使用数据库 1
OK
redis:1> EXISTS song                        # 证实 song 被移到了数据库 1 (注意命令提示符变成了"redis:1"，表明正在使用数据库 1)
(integer) 1
###########################################################################
# 当 key 不存在的时候
redis:1> EXISTS fake_key
(integer) 0
redis:1> MOVE fake_key 0                    # 试图从数据库 1 移动一个不存在的 key 到数据库 0，失败
(integer) 0
redis:1> select 0                           # 使用数据库0
OK
redis> EXISTS fake_key                      # 证实 fake_key 不存在
(integer) 0
###########################################################################
# 当源数据库和目标数据库有相同的 key 时
redis> SELECT 0                             # 使用数据库0
OK
redis> SET favorite_fruit "banana"
OK
redis> SELECT 1                             # 使用数据库1
OK
redis:1> SET favorite_fruit "apple"
OK
redis:1> SELECT 0                           # 使用数据库0，并试图将 favorite_fruit 移动到数据库 1
OK
redis> MOVE favorite_fruit 1                # 因为两个数据库有相同的 key，MOVE 失败
(integer) 0
redis> GET favorite_fruit                   # 数据库 0 的 favorite_fruit 没变
"banana"
redis> SELECT 1
OK
redis:1> GET favorite_fruit                 # 数据库 1 的 favorite_fruit 也是
"apple"

9 RANDOMKEY
从当前数据库中随机返回一个 key 。
redis> RANDOMKEY
"fruit"

10.1 	RENAME key newkey
修改 key 的名称
改名成功时提示 OK ，失败时候返回一个错误。
当 OLD_KEY_NAME 和 NEW_KEY_NAME 相同，或者 OLD_KEY_NAME 不存在时，返回一个错误。
当 NEW_KEY_NAME 已经存在时， RENAME 命令将覆盖旧值。
redis> RENAME message greeting
OK
redis> EXISTS message               # message 不复存在
(integer) 0
redis> EXISTS greeting              # greeting 取而代之
(integer) 1

10.2 RENAMENX key newkey
仅当 newkey 不存在时，将 key 改名为 newkey 。
修改成功时，返回 1 。 如果 NEW_KEY_NAME 已经存在，返回 0 。
############################
# newkey 不存在，改名成功
redis> SET player "MPlyaer"
OK
redis> EXISTS best_player
(integer) 0
redis> RENAMENX player best_player
(integer) 1
############################
# newkey存在时，失败
redis> SET animal "bear"
OK
redis> SET favorite_animal "butterfly"
OK
redis> RENAMENX animal favorite_animal
(integer) 0
redis> get animal
"bear"
redis> get favorite_animal
"butterfly"

11 TYPE key
返回 key 所储存的值的类型,数据类型有：
none (key不存在)
string (字符串)
list (列表)
set (集合)
zset (有序集)
hash (哈希表)
redis> SET weather "sunny"
OK
redis> TYPE weather
string
